@page
@model WebApp.Pages.RepositoryModel
@{
    Layout = "_Layout";
}


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    @*<script src="~/js/pages/PublicRepository.js" defer></script>*@

    <style>

        .button-container {
            text-align: right;
            margin-bottom: 20px
        }

        .comment-btn {
            align-items: start;
            border: none;
        }

        .comment-container {
            margin-bottom: 10px;
            position: relative;
            z-index: 1;
            flex: 1;
		}

		.comment-date {
			font-size: 0.875rem;
			color: #c0c3c5;
			display: block;
		}

        .comment-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .comment-message {
            font-size: 1rem;
            line-height: 1.5;
        }

        .confirm-container {
            margin-top: 10px;
            margin-bottom: 20px;
        }

        .delete-btn {
            align-items: start;
            border: none;
        }

        .edit-btn {
            align-items: start;
            border: none;
        }

        .info-container {
            overflow: auto;
            padding-bottom: 100px;
            position: relative;
            display: flex;
            flex-direction: column;
            min-height: 100vh;
        }

        .input-comment {
            margin-top: 20px;
        }

        .response-btn {
            align-items: start;
            border: none;
        }

        .subcomment {
            margin-left: 2rem;
            border-left: 3px solid #dee2e6;
            padding-left: 1rem;
            margin-top: 0.5rem;
        }

        .show-subcomment-btn {
            width: 100%;
            background-color: transparent;
            border: none;
            color: #8d9397;
            padding: 10px;
            cursor: pointer;
            text-align: left;
            display: block;
        }

        .subcomment-container {
            display: block;
        }

    </style>

</head>
<body> 
    <div class="container">
        <div class="row align-items-center">
            <h1 id="repoName" class="col-auto"></h1>
            <span id="repoVisibility" class="col-auto badge text-bg-info"></span>
        </div>

        <div class="row border-bottom border-2 mb-3 pb-2">
            <h6 id="repoTags" class="col-auto">Tags: </h6>
        </div>

        <div class="row">
            <div class="col-8">
                <div class="row mt-3 py-2">
                    <h5 class="col-auto">Branch:</h5>
                    <div class="col-3">
                        <select id="branchSelect" class="form-select" aria-label="Default select example">
                            @*Options generated by JS script*@
                        </select>
                    </div>

                    <div id="branchDiv" class="row border border-1 rounded-1 my-3 py-4">
                    </div>
                </div>
            </div>
            @*Control Buttons*@
            <div id="controlDiv" class="col-4 border-start p-4 invisible">
                <button id="modifyBtn" type="button" class="btn btn-primary w-100 m-2">Modificar Repositorio</button>
                <button id="deleteBtn" type="button" class="btn btn-danger w-100 m-2">Eliminar Repositorio</button>
                <hr />
                <div class="accordion accordion" id="accordionFlushExample">
                    <div class="accordion-item">
                        <h2 class="accordion-header">
                            <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#flush-collapseOne" aria-expanded="false" aria-controls="flush-collapseOne">
                                Crear Branch
                            </button>
                        </h2>
                        <div id="flush-collapseOne" class="accordion-collapse collapse" data-bs-parent="#accordionFlushExample">
                            <div class="accordion-body">
                                <input id="branchNameInput" type="text" class="form-control" placeholder="Nombre del Branch" />
                                <button id="createBranchBtn" type="button" class="btn btn-primary w-100 mt-2">Crear Branch</button>
                            </div>
                        </div>
                    </div>
                </div>
                <button id="deleteBranchBtn" type="button" class="btn btn-danger w-100 m-2">Eliminar Branch</button>
            </div>
        </div>

        <div class="row justify-content-center">
			<div class="col-md-10">
                <div class="button-container" id="commentBtnContainer">
                    <button class="comment-btn" id="commentBtn">Comment</button>
                </div>
				<div class="comment-container">
                    @*Comments generated by JS script*@
                </div>
                <div class="confirm-container" id="confirmBtnContainer"></div>
            </div>
        </div>

    </div>

    <script>
        const commentsContainer = document.getElementsByClassName("comment-container")[0];
        const commentBtnContainer = document.getElementById("commentBtnContainer");
        const confirmBtnContainer = document.getElementById("confirmBtnContainer");

        let commentsBase = null;
        let comments = null;

        async function loadRepoComments(repoId) {
            const commentsUrl = `https://localhost:7269/api/comment/GetByRepoId/${repoId}`;

            try {
                const commResponse = await fetch(commentsUrl);

                if (!commResponse.ok) {
                    throw new Error(`Response status: ${commResponse.status}`);
                }

                comments = await commResponse.json();

                if (Array.isArray(comments)) {
                    displayComments(comments);
                }

            } catch (error) {
                console.error(error.message);
            }
        }

        async function insertComment(commentMessage) {
            const commentsUrl = `https://localhost:7269/api/comment/InsertComment`;

            try {
                const commResponse = await fetch(commentsUrl, {
                    method: "POST",
                    body: JSON.stringify({
                        user: "user", // Change to userId
                        message: commentMessage,
                        repoId: "string", // Change to repoId
                        subcomments: []
                    }),
                    headers: { "Content-Type":"application/json" }
                });

                if (!commResponse.ok) {
                    throw new Error(`Response status: ${commResponse.status}`);
                }

            } catch (error) {
                console.error(error.message);
            }
        }

        async function deleteComment(commentId) {
            const commentsUrl = `https://localhost:7269/api/comment/DeleteComment/${commentId}`;

            try {
                const commResponse = await fetch(commentsUrl, {method: "DELETE"});

                if (!commResponse.ok) {
                    throw new Error(`Response status: ${commResponse.status}`);
                }

                loadRepoComments("string"); // Change to repoId

            } catch (error) {
                console.error(error.message);
            }
        }

        async function insertSubcomment(commentId, commentMessage) {
            const commentsUrl = `https://localhost:7269/api/comment/${commentId}/InsertSubcomment`;

            try {
                const commResponse = await fetch(commentsUrl, {
                    method: "POST",
                    body: JSON.stringify({
                        user: "user", // Change to userId
                        message: commentMessage,
                    }),
                    headers: { "Content-Type": "application/json" }
                });

                if (!commResponse.ok) {
                    throw new Error(`Response status: ${commResponse.status}`);
                }

            } catch (error) {
                console.error(error.message);
            }
        }

        async function deleteSubcomment(commentId, commentMessage) {
            const commentsUrl = `https://localhost:7269/api/comment/${commentId}/DeleteSubcomment`;

            try {
                const commResponse = await fetch(commentsUrl, {
                    method: "DELETE",
                    body: JSON.stringify({
                        user: "user", // Change to userId
                        message: commentMessage,
                    }),
                    headers: { "Content-Type": "application/json" }
                });

                if (!commResponse.ok) {
                    throw new Error(`Response status: ${commResponse.status}`);
                }

            } catch (error) {
                console.error(error.message);
            }
        }


        function displayComments(commentsList) {
            let containerHTML = "";
            commentsList.forEach(comment => {
                containerHTML += commentFormat(comment);
            })

            commentsContainer.innerHTML = containerHTML

            setActions();

            commentsBase = commentsContainer.innerHTML;
        }



        function commentFormat(commentObj) {
            let commentHTML = `<div class="card mt-3 shadow-lg" id="${commentObj.id}">
                                    <div class="comment-header bg-primary text-white p-3">
                                        <div>
                                            <span class="card-title mb-0">${commentObj.user}</span>
                                            <span class="comment-date">${getDate(commentObj)}</span>
                                        </div>
                                        <div class="button-container">
                                            <button class="delete-btn">Delete</button>
                                            <button class="edit-btn">Edit</button>
                                        </div>
                                    </div>
                                    <div class="card-body">
                                        <div class="comment-message">${commentObj.message}</div>
                                        <div class="button-container">
                                            <button class="response-btn">Responder</button>
                                        </div>
                                        <button class="show-subcomment-btn">Subcomentarios(${commentObj.subcomments.length}) ></button>
                                        <div class="subcomment-container" style="display: none;" id="${commentObj.id}[subcomments]">`;

            let index = 0;
            commentObj.subcomments.forEach(subcomment => {
                commentHTML += subcommentFormat(subcomment, commentObj.id, index);
                index += 1;
            });

            commentHTML += `</div>
                                </div>
                            </div>`;

            return commentHTML;
        }

        function subcommentFormat(subcommentObj, commentId, index) {
            let subcommentHTML = `<div class="subcomment" id="${commentId}[subcomments][${index}]">
                                        <div class="comment-header bg-secondary text-white p-2">
                                            <div>
                                                <span class="card-title mb-0">${subcommentObj.user}</span>
                                                <span class="comment-date">${getDate(subcommentObj)}</span>
                                            </div>
                                            <div class="button-container">
                                                <button class="delete-btn subcomment-btn">Eliminar</button>
                                                <button class="edit-btn subcomment-btn">Editar</button>
                                            </div>
                                        </div>
                                        <div class="comment-message p-2">${subcommentObj.message}</div>
                                    </div>`;

            return subcommentHTML;
        }

        function getDate(comment) {
            let date = formatDate(comment.creationDate);

            if (comment.creationDate != comment.lastDate) {
                date += ` (Edited ${formatDate(comment.lastDate)})`;
            }

            return date;
        }

        function formatDate(date) {
            const options = date.split(/[-T.Z]/);
            let formatedDate = `${options[2]}/${options[1]}/${options[0]} ${options[3]}`;
            return formatedDate;
        }



        function commentBtnAction() {
            document.getElementById("commentBtn").addEventListener("click", function () {
                resetCommentsView();
                commentsContainer.innerHTML = commentsBase + `<input class="input-comment" type="text" id="writeComment" placeholder="Write your comment here"></input>`;
                confirmBtnContainer.innerHTML = `<button class="response-btn" id="acceptBtn">Aceptar</button>
                                                 <button class="response-btn" id="cancelBtn">Cancelar</button>`;

                const inputComment = document.getElementById("writeComment");
                inputComment.scrollIntoView({ behavior: 'smooth' });

                document.getElementById("acceptBtn").addEventListener("click", async function () {
                    let message = inputComment.value;

                    if (!isEmptyOrSpace(message)) {
                        await insertComment(message);
                    }

                    updateCommentsView();
                });

                document.getElementById("cancelBtn").addEventListener("click", function () {
                    updateCommentsView();
                });
            });
        }

        function setDeleteAction() {
            const deleteBtns = document.getElementsByClassName("delete-btn");
            const commentDeleteBtns = Array.from(deleteBtns).filter(element =>
                !element.classList.contains("subcomment-btn")
            );
            const subcommentDeleteBtns = Array.from(deleteBtns).filter(element =>
                element.classList.contains("subcomment-btn")
            );

            commentDeleteBtns.forEach(deleteBtn => {
                deleteBtn.addEventListener("click", async (e) => {
                    const commentId = e.currentTarget.parentNode.parentNode.parentNode.id;
                    await deleteComment(commentId);
                    loadRepoComments("string"); // Change to repoId
                });
            });

            subcommentDeleteBtns.forEach(deleteBtn => {
                deleteBtn.addEventListener("click", async (e) => {
                    const subcommentId = e.currentTarget.parentNode.parentNode.parentNode.id;
                    const message = document.getElementById(subcommentId).getElementsByClassName("comment-message")[0].textContent;
                    await deleteSubcomment(getCommentId(subcommentId), message);
                    loadRepoComments("string"); // Change to repoId
                });
            });
        }

        function setDisplaySubcomments() {
            const subcomBtns = document.getElementsByClassName("show-subcomment-btn");

            Array.from(subcomBtns).forEach(subcomentBtn => {
                subcomentBtn.addEventListener("click", (e) => {
                    const subcomContainer = e.currentTarget.parentNode.getElementsByClassName("subcomment-container")[0];

                    if (subcomContainer.style.display == 'none') {
                        subcomContainer.style.display = `block`;
                        subcomentBtn.textContent = subcomentBtn.textContent.slice(0, -1) + "∧"
                    } else {
                        subcomContainer.style.display = 'none';
                        subcomentBtn.textContent = subcomentBtn.textContent.slice(0, -1) + ">"
                    }
                });
            });
        }

        function setRespondAction() {
            const respondBtns = document.getElementsByClassName("response-btn");
            
            Array.from(respondBtns).forEach(respondBtn => {
                respondBtn.addEventListener("click", respond);
            });
        }

        function respond(event) {
            resetCommentsView();

            const commentId = event.currentTarget.parentNode.parentNode.parentNode.id;
            const subcommentsList = document.getElementById(`${commentId}[subcomments]`);

            subcommentsList.innerHTML += `<input class="input-comment" type="text" id="writeComment" placeholder="Write your comment here"></input>
                                          <div class="confirm-container" id="confirmSubcommentContainer">
                                              <button class="response-btn" id="acceptBtn">Aceptar</button>
                                              <button class="response-btn" id="cancelBtn">Cancelar</button>
                                          </div>`;

            const inputComment = document.getElementById("writeComment");
            inputComment.scrollIntoView({ behavior: 'smooth' });

            document.getElementById("acceptBtn").addEventListener("click", async function () {
                let message = inputComment.value;

                if (!isEmptyOrSpace(message)) {
                    await insertSubcomment(commentId, message);
                }

                updateCommentsView();
            });

            document.getElementById("cancelBtn").addEventListener("click", function () {
                updateCommentsView();
            });
        }


        
        function isEmptyOrSpace(string) {
            return string.trim().length === 0;
        }

        function setActions() {
            commentBtnAction();
            setRespondAction();
            setDeleteAction();
            setDisplaySubcomments()
        }

        function resetCommentsView() {
            commentsContainer.innerHTML = commentsBase;

            setActions();
        }

        async function updateCommentsView() {
            await loadRepoComments("string"); // Change to repoId
            confirmBtnContainer.innerHTML = "";
        }

        function getCommentId(subcommentId) {
            const regex = /^([^\[]+)\[subcomments\]\[(\d+)\]$/;
            return subcommentId.match(regex)[1];
        }

        loadRepoComments("string");// Change to repoId
    </script>
</body>
</html>

